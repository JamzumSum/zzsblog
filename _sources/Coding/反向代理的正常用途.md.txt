---
date: 2022-03-30
html_meta:
    keywords: reverse proxy, v2ray
---

# 不能连外网的机器怎么下包？

## Motivation

可能是实验室的机器，可能是公司的某某环境。总有一些机器，因为非技术原因只能访问内网而不能访问公网（Internet）。

但是机器总是要用的，而现在已经不是拿着光盘装软件的年代了；现在是连上网一行命令装环境的年代，不能上网，哪来的环境？

这篇不是讲解怎么在离线环境下配各种环境。这篇讲一讲，**明明是ssh连的服务器，我能上网凭什么服务器不能上？**

## 分析

我们想象这样一个逻辑：笔记本`P`能够访问公网；笔记本`P`和问题服务器`S`之间能够建立连接。用`P`做中继，那么`S`是不是就能上网了呢？这实际上就叫 {term}`反向代理`。

```{glossary}
反向代理
    “代理” 一般是说客户端的请求由服务端代为发送，得到答复后再返回给客户端的过程。
    反向代理顾名思义就是两端的身份反过来，**服务端的请求由客户端代为发送**。
```

在此过程中，有以下几个角色：

1. 一个运行在服务端的代理，假设地址为 `server:proxy`。它收集服务端的请求。
2. 一个与客户端的连接，假设地址为 `server:conn`。它同客户端收发信息。
3. 一个运行在客户端的“接应”，假设地址为 `client:conn`。它代理服务端的请求，同客户端收发消息。

## 工具

道理大家肯定都懂，只不过不一定有趁手的家伙什来实现这个过程。因为过程其实比较简单，不同技术背景的人肯定有不一样的方法。
我使用的是 [v2ray][v2fly]。

{program}`v2ray` 有专门的反向代理功能，见 [reverse 反向代理][reverse]。
事实上参照这一页几乎可以完成整个配置。这里重述一下步骤。

1. 下载 {program}`v2ray` 的 [release](https://github.com/v2fly/v2ray-core/releases). 由于客户端和服务端都需要安装 {program}`v2ray`，因此可能需要下载两个版本，比如 {file}`v2ray-linux-64.zip` 和 {file}`v2ray-windows-64.zip`
2. 部署 {program}`v2ray`。将压缩包移动/发送到位，解压，检查权限。

    ```{tip}
    可以使用 {command}`scp <src> <server>:<dest>` 发送文件
    ```

3. 写配置文件。配置文件几乎不用怎么改，无非是把客户端配置的 `freedom` 里的重定向去掉、服务端加个代理监听的事。
4. 运行。先起服务端的，之后起客户端；在服务端设置代理 {envvar}`https_proxy`。

至此已经能上公网了。赶紧 {command}`conda install xxx` 一下看看 :D

## 后记

其实挺简单个事，只不过是迟迟拖着没人做罢了。得空了看看实验室大🔥谁用的上）


[v2fly]: https://www.v2fly.org/ "Project V"
[reverse]: https://www.v2fly.org/config/reverse.html "Reverse 反向代理"
