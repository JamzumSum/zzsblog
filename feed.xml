<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://www.zzsblog.top/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.zzsblog.top/" rel="alternate" type="text/html" hreflang="zh-CN" /><updated>2021-09-17T13:25:50+00:00</updated><id>https://www.zzsblog.top/feed.xml</id><title type="html">鸽园</title><subtitle>&quot;养咕千日, 用咕一时&quot;</subtitle><author><name>JamzumSum</name></author><entry><title type="html">TCaptcha的检测机制</title><link href="https://www.zzsblog.top/crawler/2021/08/18/TCaptcha%E7%9A%84%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6.html" rel="alternate" type="text/html" title="TCaptcha的检测机制" /><published>2021-08-18T00:00:00+00:00</published><updated>2021-08-18T00:00:00+00:00</updated><id>https://www.zzsblog.top/crawler/2021/08/18/TCaptcha%E7%9A%84%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6</id><content type="html" xml:base="https://www.zzsblog.top/crawler/2021/08/18/TCaptcha%E7%9A%84%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6.html">&lt;h1 id=&quot;tcaptcha的检测机制&quot;&gt;TCaptcha的检测机制&lt;/h1&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;由于我最近在做&lt;a href=&quot;https://github.com/JamzumSum/QQQR&quot; title=&quot;a simulation of tencent login HTTP protocol&quot;&gt;QQQR&lt;/a&gt;的验证码部分, 比如&lt;img src=&quot;/assets/tdx/tcapcha-screenshot.png&quot; alt=&quot;这种&quot; /&gt;, 在Qzone2TG的前面一些版本里, 我都是用selenium爬取图像配合模拟拖动来做的, 当然也需要一点点的cv技术.&lt;/p&gt;

&lt;p&gt;但上面这种办法虽说理论可行, 但并非真的万无一失. 事实上, 在一开始开发的时候跑通之后, 这个办法就再也没好用过. 等到后来我用selenium抓二维码登录, 乃至&lt;a href=&quot;https://github.com/JamzumSum/QQQR&quot; title=&quot;a simulation of tencent login HTTP protocol&quot;&gt;QQQR&lt;/a&gt;的第一个版本能够实现协议二维码登录的时候, 我就更不想用这种不可靠的办法了.&lt;/p&gt;

&lt;p&gt;直到&lt;a href=&quot;https://github.com/JamzumSum/QQQR&quot; title=&quot;a simulation of tencent login HTTP protocol&quot;&gt;QQQR&lt;/a&gt;的开发到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.3.0&lt;/code&gt;, 我囿于一种执着重新开始研究验证码的破解之道, 在长达十余天乃至可想见的数十天中仔细研究抓包结果和TCaptcha相关的js代码, 我才终于意识到, 使用selenium这些模拟登录的办法究竟处在一种怎样危险的境地.&lt;/p&gt;

&lt;p&gt;截至目前, 我还没有搞定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23003 网络环境异常&lt;/code&gt;的问题. 我相信唯一让我露馅的可能就在于验证码检测的时候. 尽管如此, 我仍然发现了很多tx检测浏览器特征的”小动作”.&lt;/p&gt;

&lt;h2 id=&quot;tdxjs&quot;&gt;tdx.js&lt;/h2&gt;

&lt;p&gt;在加载TCapcha的时候, 页面会载入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tdx.js&lt;/code&gt;. 这整个一个JS就是一个…虚拟机, 用我自己能明白的话来说就是一个指令集+栈+纸带(雾)的组合. 我在这上是个外行, 有的时候不明白加密何至于搞这么大的阵仗. 但不得不承认, js混淆+这种叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TENCENT_CHAOS_VM&lt;/code&gt;的技术的确可以大大阻碍我们这些不守规矩的人(嚣张. 但可惜, tx自己搞了个什么大赛, 这种虚拟机的机制已经参赛的大佬们看透了. 我这种一开始蒙在鼓里的人, 在Github上一搜, 也就明白得差不多了.&lt;/p&gt;

&lt;p&gt;上面所说的, 指令集+栈+纸带的组合其实就完全确定了程序的逻辑. 我的目的也就是在这一团糊糊里找出tx究竟搜集了什么信息进而判断出我不对劲的 :(&lt;/p&gt;

&lt;p&gt;我首先尝试了一些手动反汇编的办法, 给每个命令加输出, 类似编译器. 但, 应该说是受限于我本身的水平, 得到的结果不够准确, 没法交给机器处理, 也就没大用. 不过从另一个角度, 这一步让我真正地深入到了指令运行的内部, 从而为后面的调试打下了基础.&lt;/p&gt;

&lt;h2 id=&quot;到底检测了什么&quot;&gt;到底检测了什么&lt;/h2&gt;

&lt;p&gt;背景和步骤到此为止, 没有再多说的必要了. 下面就是列出一些检测的条目, 给包括我在内的初出茅庐的人们一点警醒: selenium等等这些模拟手段没那么”真”.&lt;/p&gt;

&lt;h3 id=&quot;自动化测试工具&quot;&gt;自动化测试工具&lt;/h3&gt;

&lt;p&gt;这一类比较泛用, 是确切的用来检测客户端是否受自动化控制的办法.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;window.callPhantom&lt;/li&gt;
  &lt;li&gt;window._phantom&lt;/li&gt;
  &lt;li&gt;window.WebPage&lt;/li&gt;
  &lt;li&gt;window.fxdriver_id&lt;/li&gt;
  &lt;li&gt;window.__fxdriver_unwrapped&lt;/li&gt;
  &lt;li&gt;window.domAutomation&lt;/li&gt;
  &lt;li&gt;window.ubot&lt;/li&gt;
  &lt;li&gt;window.CasperError&lt;/li&gt;
  &lt;li&gt;window.casper&lt;/li&gt;
  &lt;li&gt;window.patchRequire&lt;/li&gt;
  &lt;li&gt;navigator.webdriver&lt;/li&gt;
  &lt;li&gt;document.$cdc_asdjflasutopfhvcZLmcfl_&lt;/li&gt;
  &lt;li&gt;document.__webdriver_script_fn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些属性, 正常应该为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. 在使用某些特定工具时, 这些值会被设置, 从而可以直接断定当前访问是受自动化控制的.&lt;/p&gt;

&lt;p&gt;比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.navigator.webdriver&lt;/code&gt;, 使用selenium时该项会设为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;; 
比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.document.$cdc_asdjflasutopfhvcZLmcfl_&lt;/code&gt;是chromedriver的一项特征, 正常的浏览器并没有这个键.&lt;/p&gt;

&lt;h3 id=&quot;环境信息&quot;&gt;环境信息&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tdx.js&lt;/code&gt;也读取了这些信息, 分析它们可以判断当前客户端处在一个什么样的环境. 虽然没有证据. 但我相信&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23003&lt;/code&gt;的错误应该就在此检出(雾&lt;/p&gt;

&lt;h4 id=&quot;documentmozhidden&quot;&gt;document.mozHidden&lt;/h4&gt;

&lt;p&gt;似乎是检查标签页是否可见, 在chromium上为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;navigator&quot;&gt;navigator&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;navigator.userAgent&lt;/li&gt;
  &lt;li&gt;navigator.appVersion&lt;/li&gt;
  &lt;li&gt;navigator.platform&lt;/li&gt;
  &lt;li&gt;navigator.cookieEnabled&lt;/li&gt;
  &lt;li&gt;navigator.languages&lt;/li&gt;
  &lt;li&gt;navigator.vendor&lt;/li&gt;
  &lt;li&gt;navigator.appName&lt;/li&gt;
  &lt;li&gt;navigator.plugins&lt;/li&gt;
  &lt;li&gt;navigator.getBattery&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;document--location&quot;&gt;document &amp;amp; location&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;document.charset&lt;/li&gt;
  &lt;li&gt;document.cookie&lt;/li&gt;
  &lt;li&gt;document.referrer&lt;/li&gt;
  &lt;li&gt;document.documentElement.clientWidth&lt;/li&gt;
  &lt;li&gt;document.documentElement.clientHeight&lt;/li&gt;
  &lt;li&gt;document.getElementById&lt;/li&gt;
  &lt;li&gt;location.href&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;screen--other-display-properties&quot;&gt;screen &amp;amp; other display properties&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;screen.colorDepth&lt;/li&gt;
  &lt;li&gt;screen.width&lt;/li&gt;
  &lt;li&gt;screen.height&lt;/li&gt;
  &lt;li&gt;screen.availHeight&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;screen.pixelDepth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;window.innerWidth&lt;/li&gt;
  &lt;li&gt;window.innerHeight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述这些属性和方法均是被检查的对象. 这些项恐怕也是selenium等工具的优势所在: 它们能和正常浏览器保持一致.&lt;/p&gt;

&lt;p&gt;当然, 对于普通的爬虫来说, 恐怕不会有这么细致的检查, 毕竟通常我们只爬HTML, 这些情形基本是遇不到的. 
但毕竟&lt;a href=&quot;https://github.com/JamzumSum/QQQR&quot; title=&quot;a simulation of tencent login HTTP protocol&quot;&gt;QQQR&lt;/a&gt;是要直接和验证码作斗争, 其本质不仅仅是爬虫, 使用的工具也是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt;+&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;的基础组合, 因此这些都是要注意的对象.&lt;/p&gt;

&lt;h3 id=&quot;用户操作&quot;&gt;用户操作&lt;/h3&gt;

&lt;p&gt;人类访问是需要操作的, 而爬虫没这个必要. 因此&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tdx.js&lt;/code&gt;也收集用户的动作.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;客户端类型(手机/PC)&lt;/li&gt;
  &lt;li&gt;点击等(似乎并不编码于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect&lt;/code&gt;字段, 而是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action&lt;/code&gt;字段)&lt;/li&gt;
  &lt;li&gt;坐标系(验证码位置, 缩放比), 以及拖动拼图时鼠标的时间-坐标关系&lt;/li&gt;
  &lt;li&gt;…(是否有其他的还不清楚)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;未完待续&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>JamzumSum</name></author><category term="crawler" /><category term="crawler" /><category term="QQQR" /><category term="Qzone" /><category term="Qzone2TG" /><summary type="html">TCaptcha的检测机制</summary></entry><entry><title type="html">Pytorch定位NaN</title><link href="https://www.zzsblog.top/coding/2021/08/07/pytorch%E5%AE%9A%E4%BD%8DNaN.html" rel="alternate" type="text/html" title="Pytorch定位NaN" /><published>2021-08-07T00:00:00+00:00</published><updated>2021-08-07T00:00:00+00:00</updated><id>https://www.zzsblog.top/coding/2021/08/07/pytorch%E5%AE%9A%E4%BD%8DNaN</id><content type="html" xml:base="https://www.zzsblog.top/coding/2021/08/07/pytorch%E5%AE%9A%E4%BD%8DNaN.html">&lt;h1 id=&quot;pytorch定位nan&quot;&gt;Pytorch定位NaN&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;有关内容在网上其实有一些比较系统的文章, 但水文更多一点相对不太好找. 这里结合我自己的经验再总结一下.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;三板斧&quot;&gt;三板斧&lt;/h2&gt;

&lt;p&gt;检查NaN有三板斧, 尽管调试NaN通常需要一定的经验和耐心, 但记住这三个至少不至于手足无措.&lt;/p&gt;

&lt;h3 id=&quot;1-正向传播异常侦测&quot;&gt;#1 正向传播异常侦测&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autograd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_detect_anomaly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如题, forward时出现NaN即时报错. 尽管说得好听, 但有的时候并不能准确地定位问题所在. 属于调试NaN的必要辅助.&lt;/p&gt;

&lt;h3 id=&quot;2-反向传播异常侦测&quot;&gt;#2 反向传播异常侦测&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# loss = model(X)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autograd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detect_anomaly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如题, backward时出现NaN时即时报错. 相比#1来说更难确切定位问题, 往往用于兜底, 即确保出现NaN时程序会尽快抛出异常.&lt;/p&gt;

&lt;h3 id=&quot;3-assert&quot;&gt;#3 assert&lt;/h3&gt;

&lt;p&gt;assert是确保程序行为正确的重要手段. 对于一个算法来说, 出现NaN不管怎么说都意味着不正常. 同时, 对debug来说, 最重要的就是找到事发现场, 而assert正是寻找真正现场的利器.&lt;/p&gt;

&lt;p&gt;在pytorch中, 检查NaN的函数为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.isnan(T)&lt;/code&gt;. 于是我们可以构造如下断言:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;当然, 这么写其实有一点性能浪费, 但写python, 又是debug专用代码, 何必考虑这么多呢¯\_(ツ)_/¯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;将这个断言加在你认为有可能出现NaN的步骤之后. 这样一旦出现NaN, 你至少能抓住一个现场. 哪怕这个现场已经漂移, 配合调试器你也能更有逻辑地找到真正的事发现场.&lt;/p&gt;

&lt;h2 id=&quot;nan的可能原因&quot;&gt;NaN的可能原因&lt;/h2&gt;

&lt;p&gt;讲完三板斧总得讲讲NaN的成因, 要不然就是光有方法没有理论(x 尤其是#3, 要求调试者非常充分且熟练地掌握NaN的可能成因.&lt;/p&gt;

&lt;h3 id=&quot;梯度爆炸&quot;&gt;梯度爆炸&lt;/h3&gt;

&lt;p&gt;梯度爆炸, 或者梯度消失都可能导致NaN. 这个问题往往会被#2 反向传播异常检测捕获, 但真正定位到问题却难上加难. 相对来说, 重新推导一遍自己的理论模型、寻找可能导致梯度爆炸的计算显得更有针对性.&lt;/p&gt;

&lt;h3 id=&quot;计算不合法&quot;&gt;计算不合法&lt;/h3&gt;

&lt;p&gt;这也是NaN最常见的成因. 毕竟大多数的网络, 尤其是复现、组合别人的网络结构一般不会碰到梯度爆炸的问题, 而NaN大多出现于loss计算的部分, 诞生于某个小小的不合法计算, 然后污染它参与计算的所有结果, 最后在你的loss值上表现出来.&lt;/p&gt;

&lt;p&gt;常见套路:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$ log(x), x \leq 0 $&lt;/li&gt;
  &lt;li&gt;$ c/0 $&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;尚有其他的一些情况我自己没遇到过, 网上可能会有补充&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种问题运气好的话会被#1 正向异常检测直接找到, 但通常是找到一个漂移了亿点点的位置. 推荐用#3 assert的办法, 尤其是 &lt;strong&gt;自己写了loss时&lt;/strong&gt;, 在关键位置放几个assert守门, 总归是没错的.&lt;/p&gt;

&lt;p&gt;注意, 绝大多数时候, inf也是不合常理的存在. 因此你可能也需要同时寻找inf:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isnan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isinf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;脏数据&quot;&gt;脏数据&lt;/h3&gt;

&lt;p&gt;NaN的次常见成因. 顾名思义, 出现NaN仅仅是因为数据里含有NaN. 通常来说直接读图片不会出现NaN, 往往是大意地处理数据后会出现这种情况.&lt;/p&gt;

&lt;p&gt;随便举个例子.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# serialize mask
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这句话看起来没问题, 把uint8{0, 255}转成float32[0, 1]. 相信很多人都这么写过. 正常来说不会有任何问题, 直到我遇到了一张纯黑的mask :P&lt;/p&gt;

&lt;p&gt;毕竟谁也不会想到有一张图没标注还给放数据集里了是吧. 但不管怎么说, 此时我们犯了”除零”的错误. 这个mask会变成携带NaN的脏数据输入模型, 并在计算loss时将loss结果污染. 如果程序没有及时终止, 在仅仅一次反向传播之后, 你的模型参数将变为NaN, 其一切推导将得出NaN ¯\_(ツ)_/¯&lt;/p&gt;

&lt;h2 id=&quot;检查nan的一般步骤&quot;&gt;检查NaN的一般步骤&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;检查数据&lt;/li&gt;
  &lt;li&gt;开启正向和反向异常检测&lt;/li&gt;
  &lt;li&gt;给模型的直接输出结果和最终loss加assert&lt;/li&gt;
  &lt;li&gt;通过经验、猜测、反推等方法逐步把assert加到之前的步骤, 直到触发的assert帮你找到了不合法计算&lt;/li&gt;
  &lt;li&gt;若计算loss的过程中没有发现问题, 且总是触发反向传播异常, 那可以考虑从理论上检查梯度爆炸和梯度消失&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;未完待续: 可能会加入新的例子和参考&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>JamzumSum</name></author><category term="coding" /><category term="PyTorch" /><summary type="html">Pytorch定位NaN</summary></entry><entry><title type="html">记录不可思议</title><link href="https://www.zzsblog.top/coding/2021/08/05/%E8%AE%B0%E5%BD%95%E4%B8%8D%E5%8F%AF%E6%80%9D%E8%AE%AE.html" rel="alternate" type="text/html" title="记录不可思议" /><published>2021-08-05T00:00:00+00:00</published><updated>2021-08-05T00:00:00+00:00</updated><id>https://www.zzsblog.top/coding/2021/08/05/%E8%AE%B0%E5%BD%95%E4%B8%8D%E5%8F%AF%E6%80%9D%E8%AE%AE</id><content type="html" xml:base="https://www.zzsblog.top/coding/2021/08/05/%E8%AE%B0%E5%BD%95%E4%B8%8D%E5%8F%AF%E6%80%9D%E8%AE%AE.html">&lt;h1 id=&quot;记录不可思议&quot;&gt;记录不可思议&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;很难想象我又开新帖了. 这篇会一直更, 记录一些碰到的意想不到的问题.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;float0_0&quot;&gt;float(0_0)?&lt;/h2&gt;

&lt;p&gt;不难理解, 但很难接受. 在写不规范json解析器的时候碰到的.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 0.0
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0_0_0_0_0_0_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 0.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接让我开了一篇新帖.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 10.0
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 12000.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就好接受多了, 权当自己孤陋寡闻吧.&lt;/p&gt;</content><author><name>JamzumSum</name></author><category term="coding" /><category term="Python" /><summary type="html">记录不可思议</summary></entry><entry><title type="html">用Docker快速部署NextCloud和WordPress, 以及开启Https</title><link href="https://www.zzsblog.top/linux/2020/02/20/docker+nextcloud+wordpress.html" rel="alternate" type="text/html" title="用Docker快速部署NextCloud和WordPress, 以及开启Https" /><published>2020-02-20T00:00:00+00:00</published><updated>2020-02-20T00:00:00+00:00</updated><id>https://www.zzsblog.top/linux/2020/02/20/docker+nextcloud+wordpress</id><content type="html" xml:base="https://www.zzsblog.top/linux/2020/02/20/docker+nextcloud+wordpress.html">&lt;h1 id=&quot;用docker快速部署nextcloud和wordpress-以及开启https&quot;&gt;用Docker快速部署NextCloud和WordPress, 以及开启Https&lt;/h1&gt;

&lt;p&gt;Deploy NextCloud &amp;amp; WordPress with docker and enable HTTPS.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一次发文emmmm 有点紧张hhh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;话说zzs买了个小VPS觉得太闲了, 前几天逛基安的时候看见有人发文搞nextcloud离线下载, 这就心痒痒起来(其实我是因为想倒腾EFB微信转发tg才想起来我还有一VPS…(不过没什么关系我就不说了(实际上是因为折腾了两天发现怎么弄也不好使QAQ)))&lt;/p&gt;

&lt;p&gt;废话少说, 大家买来VPS都做什么呢? 国外的可以拿来飞飞机? 除了这个呢? (开始滑稽) NextCloud是一款肥肠棒的个人云存储服务, 自己用或者家里用, 再或者小团队什么的非常nice(还有离线下载哦你懂的). WordPress, 就是你现在看见的, 做个个人主站啊博客什么的…&lt;del&gt;好像也可以拿来鸽的样子(咕!)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;行了上面都是废话, 我写的可能 &lt;strong&gt;不能算是教程&lt;/strong&gt;, 毕竟我原本的目的只是记录一下自己的失败经历…然后给大家说说我是怎么解决的, 教程还是上网搜合适, 文末我会列出来我到最后还开着的几个网页(捂脸)&lt;/p&gt;

&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Debian9, 厂家是Vultr&lt;/li&gt;
  &lt;li&gt;域名一个, 阿里云一块钱一年那个 &lt;del&gt;(贫穷.jpg)&lt;/del&gt; , 已搞定域名解析.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装docker&quot;&gt;安装Docker&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;我从没想过第一步就有这么大的岔子(比比划划)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;问题-dockersocket-control-process-exited-codeexited-status127&quot;&gt;问题: docker.socket: Control process exited, code=exited status=127&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;咱都是按着教程来的, 装都装好了为啥就启不动捏? 查日志看见上面这句话, 啥意思啊? 咋回事啊? 嘎哈啊? 百度罢. 结果百度一番, 错误码216的, 203的, 还有什么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1/FAILURE&lt;/code&gt;的, &lt;strong&gt;就是没有错误码127&lt;/strong&gt;…Google了一下, 看见一个可能是127的还&lt;del&gt;TM&lt;/del&gt;是日语的…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;zzs的话: 请务必注意自己的错误码/退出码 &lt;strong&gt;是不是和网上的教程一样&lt;/strong&gt;, zzs因为找了错误的教程把用户组整的一团糟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;多余的咱就不说了, 最后还是叫咱找着办法了: &lt;a href=&quot;1&quot;&gt;ubuntu安装docker-ce&lt;/a&gt; 这篇打开了局面, 里面的0x03部分, 说的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libltdl7和libsystemd-journal0依赖问题&lt;/code&gt;, 要安装libltdl7和libsystemd-journal0彩星. 然而实际操作发现libsystemd-journal0没有这个玩意(可能因为我是Debian stretch罢, 跟ubuntu还是有点区别), 那就&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libsystemd-journal&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一波, 反正真是给我莽上了…然后, 又碰见0x02所述错误, 按照教程解决.&lt;/p&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;安装libltdl7和libsystemd-journal0&lt;/li&gt;
  &lt;li&gt;到上面教程里给的网站, 找到对应的操作系统, 手动下载安装&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-ce-cli&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd.io&lt;/code&gt;的deb包&lt;/li&gt;
  &lt;li&gt;还是哪个网站, 就在那个页面, 下载安装&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-ce&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice.&lt;/p&gt;

&lt;h2 id=&quot;安装wordpress和nextcloud&quot;&gt;安装WordPress和NextCloud&lt;/h2&gt;

&lt;h3 id=&quot;问题1-我不想用nginx-也不想用docker-compose&quot;&gt;问题1: 我不想用Nginx, 也不想用docker-compose&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;看官dalao见笑了, 毕竟小白 整不懂那些高级货…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;subq1-数据库为啥只能开一个吖&quot;&gt;subQ1: 数据库为啥只能开一个吖?&lt;/h4&gt;

&lt;p&gt;我本来是想用docker起两个数据库来着, 但是第二个mysql container就是起不来, 刚start就exit了…进去一瞧, 是这样的:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql mmap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;137363456 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; failed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; errno 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;搜了一下, 大概就是swap分区不够…我free了一下, 好像确实不够…&lt;del&gt;不过当时确实没打算管了, 就只开了一个给wordpress, nextcloud用它自己的sqlite就得了…&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;2019-12月记: 我这次弄了个阿里云的学生机, 空间还够, 我就开两个MySQL.&lt;/p&gt;

&lt;p&gt;开一个MySQL:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysql-nextcloud &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /root/nextcloud/mysql/:/var/lib/mysql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--innodb-buffer-pool-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64M &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;这写密码&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了不出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The server requested authentication method unknown to the client&lt;/code&gt;的错误, 进去配置数据库:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 切换软件源, 国外的VPS就不用这步骤&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/apt/sources.list
apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim
vim /etc/my.cnf
&lt;span class=&quot;c&quot;&gt;# 输入这些内容&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;mysqlId]
&lt;span class=&quot;nv&quot;&gt;default_authentication_plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql_native_password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启MySQL. 然后重新进入, 建立nextcloud数据库.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;CREATE DATABASE nextcloud;
create user 'nextclouduser'@'%' identified by '这写数据库密码';
grant all privileges on nextcloud.* to 'nextclouduser'@'%' with grant option;
flush privileges;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意, 新pull来的镜像是MySQL8, 授权语句变得不一样了.
其实之前修改配置文件也是因为nextcloud镜像的php还不能使用新验证方式验证, 还得修改默认的认证插件.&lt;/p&gt;

&lt;p&gt;NextCloud:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; nextcloud &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /root/nextcloud/data:/data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /etc/letsencrypt:/etc/letsencrypt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8088:443 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; mysql-nextcloud:mysql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; nextcloud
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;subq2-wordpress连不上数据库&quot;&gt;subQ2: WordPress连不上数据库???&lt;/h4&gt;

&lt;p&gt;这个问题应该不算疑难, 网上比较好搜…大致就是数据库拒绝访问? 可以看看这两篇教程:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;3&quot;&gt;使用docker搭建wordpress网站&lt;/a&gt;
启动数据库容器的命令比较有参考价值.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;4&quot;&gt;docker 安装wordpress&lt;/a&gt;
里面提及的SQL操作解决了数据库访问问题.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; mysql-wordpress bash
mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
这写密码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;ALTER USER 'root'@'%' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '这写密码';
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上边是我用的命令…我看有的只用一句就行…爱咋咋地罢…顺便贴上我跑数据库和WordPress的命令&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysql-wordpress &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /root/wordpress/mysql/:/var/lib/mysql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;这写密码&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
mysql

docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wordpress &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 443:443 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; mysql-wordpress:mysql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /etc/letsencrypt:/etc/letsencrypt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /root/wordpress-html:/var/www/html &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; wordpress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;您可能看见了我挂载了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/letsencrypt&lt;/code&gt;, 毕竟我们是要开Https的…所以, 端口
80和 &lt;strong&gt;443&lt;/strong&gt; 都要留出来.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果想不重开一个容器, 还要修改端口, 那就要修改一两个文件…zzs改了半天发现它老是自己改回去… 明明是照着教程做的结果却一点都不一样…所以请务必留出443端口.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;subq3-nextcloud提示不信任的域名&quot;&gt;subQ3: NextCloud提示不信任的域名?&lt;/h4&gt;

&lt;p&gt;直接IP访问没有问题, 用域名访问会提示不信任的域名, 给了你办法, 修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.php&lt;/code&gt;. zzs进了容器之后直接&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whereis config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, 告诉我是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/src/nextcloud/config&lt;/code&gt;…然后那里面也没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.php&lt;/code&gt;, 我就苦逼地在那新建, 然后怎么改怎么没用…实际上是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;里面, 就是刚进容器的目录…在它下面有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;目录, 里面有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.php&lt;/code&gt;, 这才是运行时配置, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*src*&lt;/code&gt;什么的, 一看就是源码啥的(捂脸)&lt;/p&gt;

&lt;p&gt;在里面加上这么一段配置就行了.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PHP&quot;&gt;'trusted_domains' =&amp;gt;
  array (
   0 =&amp;gt; 'localhost',
   1 =&amp;gt; 'zzsblog.top',
   2 =&amp;gt; 'www.zzsblog.top',
   3 =&amp;gt; '我这行写的是服务器地址, 实际上应该不用',
),
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;开启ssl&quot;&gt;开启SSL&lt;/h2&gt;

&lt;p&gt;开头贴两篇教程以示尊敬. 不管用不用的上, 进去瞅瞅.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;5&quot;&gt;烂泥：wordpres和nextcloud启用https访问&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;2&quot;&gt;Docker 安装 Wordpress 并开启 HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;问题2-certbot啥玩意啊&quot;&gt;问题2: certbot啥玩意啊?&lt;/h3&gt;

&lt;p&gt;网上搜了一下大家都用的是Let’s Encrypt的SSL证书, 有个叫certbot的工具来自动帮你注册证书…于是乎就发现certbot不会用…(捂脸) 网上的教程与我们的实际情况相差比较大, 于是在certbot的官网上找找, 折腾出了一个办法. (安装请自行搞定)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;certbot certonly -–webroot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;敲上之后, 程序会让你填邮箱啊同意协议这些, 你知道该怎么做. 之后看到, 要让你填域名了, 把你解析到你服务器上的域名填上, 可以填多个, 空格分隔.&lt;/p&gt;

&lt;p&gt;下一步, 划重点. &lt;strong&gt;webroot是个啥玩意啊?&lt;/strong&gt; zzs很惭愧, 看名字就能领悟的问题想了两天. 答案就是, 你启动容器的时候宿主机上链接的位置. 比如我的挂载的路径就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/root/wordpress-html&lt;/code&gt;, 如果你忘了自己敲了啥, 可以去docker的配置文件里自己瞅瞅…&lt;del&gt;过于复杂, 咱就不说了哈.&lt;/del&gt; 这里要注意, webroot模式要保持你机器上webserver开启, 也就是说这个时候你的 &lt;strong&gt;80端口一定要在LISTEN&lt;/strong&gt; 千万别把映射80端口那个容器关了.&lt;/p&gt;

&lt;p&gt;于是你就能看到, 在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/letsencrypt/live/zzsblog.top/&lt;/code&gt;下(反正在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;live&lt;/code&gt;文件夹下找就行了)有一堆证书啊私钥啊什么的, 这些证书的物理存储在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/letsencrypt/archive/&lt;/code&gt;下 &lt;del&gt;, 请注意&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cert1.pem&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;privkey1.pem&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullchain1.pem&lt;/code&gt;这几个文件, 一会开https要用.&lt;/del&gt;
这几个软连接也是可以用的, 也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/letsencrypt/live/zzsblog.top/&lt;/code&gt;下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cert.pem&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;privkey.pem&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullchain.pem&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;问题3-证书有了-咋用啊&quot;&gt;问题3: 证书有了, 咋用啊?&lt;/h3&gt;

&lt;p&gt;进入docker容器, 无论NextCloud还是WordPress &lt;strong&gt;都是一样的&lt;/strong&gt; 操作.
先安一波vim, 发现安不了(fxxk). 这时你需要update一下.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后测试一下openssl安上没, 命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl&lt;/code&gt;, 进入了就对了, 敲&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt;退出.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a2enmod ssl &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;docker restart wordpress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实运行过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a2enmod ssl&lt;/code&gt;后第一次只要重启apache即可, 图省事就直接重启容器了.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有兴趣可以看看我贴的教程链接, 里面对各个步骤有一些解释.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/apache2/sites-available/default-ssl.conf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
/etc/apache2/sites-enabled/default-ssl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后修改刚才软连接的源, 也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apache2/sites-available/default-ssl.conf&lt;/code&gt;. 这里就是我和原教程不一样的地方了. 要改的有三处:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSLCerticicateFile
填cert.pem, 具体路径自己写(你之前已经挂载了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/letsencrypt&lt;/code&gt;了罢?)&lt;/li&gt;
  &lt;li&gt;SSLCertificateKeyFile
这个是privkey.pem&lt;/li&gt;
  &lt;li&gt;SSLCertificateChainFile
这个被注掉了, 把注释去掉, 填fullchain.pem那个.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apache2/sites-available/&lt;/code&gt;下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;000-default.conf&lt;/code&gt;文件, 在最外层标签里增加下面一段:&lt;/p&gt;

&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&lt;span class=&quot;n&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/www/html&quot;&lt;/span&gt;&amp;gt;
    &lt;span class=&quot;n&quot;&gt;RewriteEngine&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RewriteBase&lt;/span&gt; /
    &lt;span class=&quot;c&quot;&gt;# FORCE HTTPS
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;RewriteCond&lt;/span&gt; %{&lt;span class=&quot;n&quot;&gt;HTTPS&lt;/span&gt;} !=&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RewriteRule&lt;/span&gt; ^/?(.*) &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;://%{&lt;span class=&quot;n&quot;&gt;SERVER_NAME&lt;/span&gt;}/$&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;]
&amp;lt;/&lt;span class=&quot;n&quot;&gt;Directory&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后呢, 就算完了, https访问成功, http重定向到https. 有关收尾工作, 可以看一下&lt;a href=&quot;2&quot;&gt;这篇教程&lt;/a&gt;, 在wordpress里设置本站网址(实际上好像就是你浏览器地址栏里显示的地址), 然后在数据库里替换一下http链接(如果你之前没在上面发过链接啊图片啊什么的应该是不用), 命令是这个, 原教程里也有&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;update wp_posts set post_content = replace(post_content, 'http://zzsblog.top','https://zzsblog.top');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;记得把域名改了啊(滑稽)&lt;/p&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.cnblogs.com/pcat/p/7977877.html ubuntu安装docker-ce&lt;/li&gt;
  &lt;li&gt;https://blog.csdn.net/yori_chen/article/details/88577249 Docker 安装 Wordpress 并开启 HTTPS&lt;/li&gt;
  &lt;li&gt;https://www.jianshu.com/p/cdd94d6c2d68 使用docker搭建wordpress网站&lt;/li&gt;
  &lt;li&gt;https://my.oschina.net/langwanghuangshifu/blog/2965662 docker 安装wordpress&lt;/li&gt;
  &lt;li&gt;https://www.ilanni.com/?p=13347 烂泥：wordpres和nextcloud启用https访问&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;除了上面提到的教程, 还向我翻到的一万个教程的作者们表示感谢.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在是2021年8月份, 此时我刚刚重建了博客, 以github托管的形式(笑, 也就是你所见的此处. 于是也就没有什么wordpress之类了, 发这篇的目的呢, 充数罢了(笑. 不过好歹也算自己以前的试错经历, 发出来说不定能帮到你呢?&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>JamzumSum</name></author><category term="Linux" /><category term="Linux" /><category term="docker" /><category term="nextcloud" /><category term="wordpress" /><summary type="html">用Docker快速部署NextCloud和WordPress, 以及开启Https</summary></entry><entry><title type="html">使用Exiv2修改图像的EXIF头信息</title><link href="https://www.zzsblog.top/coding/2019/12/13/exiv2.html" rel="alternate" type="text/html" title="使用Exiv2修改图像的EXIF头信息" /><published>2019-12-13T00:00:00+00:00</published><updated>2019-12-13T00:00:00+00:00</updated><id>https://www.zzsblog.top/coding/2019/12/13/exiv2</id><content type="html" xml:base="https://www.zzsblog.top/coding/2019/12/13/exiv2.html">&lt;h1 id=&quot;使用exiv2修改图像的exif头信息&quot;&gt;使用Exiv2修改图像的EXIF头信息&lt;/h1&gt;

&lt;p&gt;上回我们说到, zzs写了一个下载必应美图的程序. 然而还没完, 我一直想改一下&lt;img src=&quot;/assets/exiv2/example.png&quot; alt=&quot;这个东西&quot; /&gt;…当时注意力就在这些什么”详细信息”啊, “属性”之类的上面, 搜啊搜啊, 也没找到什么办法…&lt;/p&gt;

&lt;p&gt;今天早晨拿两个文件做对比试验, 于是发现修改了详细信息的文件(JPEG)会多出来一个”头部”, 恍然大明白(捂脸), 一番搜索知道了这个叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXIF&lt;/code&gt;头信息, 于是就有了下面这篇文章.&lt;/p&gt;

&lt;h2 id=&quot;编译exiv2&quot;&gt;编译&lt;a href=&quot;https://www.exiv2.org/&quot;&gt;Exiv2&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;我就不跟你们说我从哪找来这么个玩意儿的事了, 反正就是百度上搜两三个读写EXIF的库, 看看哪个好点…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;话说zzs从Exiv2的官网上下载了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2017msvc64&lt;/code&gt;的build包, 加载到自己的项目里就炸了. 原因很奇怪, 说是没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::auto_ptr&lt;/code&gt;这种类型. 当年看&lt;em&gt;Effective C++&lt;/em&gt; 的时候见过这个类型, 肿么就没有了捏? 网上一查知道, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto_ptr&lt;/code&gt;这种类型在C++11的时候就已经废弃了, C++17时把它移除了. zzs的C++语言标准一直都是17, 所以没有这个类型.&lt;/p&gt;

&lt;p&gt;我当时一寻思, 我是不太乐意改语言标准的, 因为我比较喜欢尝试新特性…所以就试着自己编译一下.&lt;/p&gt;

&lt;h3 id=&quot;git-clone&quot;&gt;git clone&lt;/h3&gt;

&lt;p&gt;这步你们都懂罢, 拉一份最新的源码下来, 仓库在官网下载页里有, 我就不贴命令了&lt;/p&gt;

&lt;h3 id=&quot;用vs-cmake编译exiv2&quot;&gt;用VS Cmake编译Exiv2&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;我自己是根本不会用什么cmake什么什么的, 但是我知道VS可以帮我干这个. 以前我编译过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tesseract&lt;/code&gt;, 那时候只知道cmake这么个名 &lt;del&gt;(其实现在也一样)&lt;/del&gt;…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在exiv2的文件夹里&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift+右键&lt;/code&gt;, 点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;用Visual Studio打开&lt;/code&gt;, 如果你没有就用正常办法…打开之后VS会自动建立cmake缓存, 可以看&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;输出&lt;/code&gt;选项卡看看VS在做什么.&lt;/p&gt;

&lt;p&gt;然后呢, 我这是报了个错, 说是找不到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPAT&lt;/code&gt;, 我百度了一下都是英文, 索性也不看了, 就用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vcpkg&lt;/code&gt;装了一个…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;vcpkg install expat:x64-windows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意我一直是x64平台编译, 所以只安装64位的, 如果你也用x86, 那还要安装x86版本的.&lt;/p&gt;

&lt;p&gt;这里给微软打个广告, &lt;a href=&quot;https://docs.microsoft.com/zh-cn/cpp/build/vcpkg?view=vs-2017&quot;&gt;vcpkg&lt;/a&gt;虽然平时的项目里不知道为啥不好使, 但是在cmake的时候真的是帮我这种小白好大忙, 缺什么包敲个命令就好了, 不用我自己下载编译什么的.&lt;/p&gt;

&lt;p&gt;依赖问题解决, cmake缓存正常, 这时候我去src里面找源码, 发现源码里面居然一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto_ptr&lt;/code&gt;都没有??? 可能是从git上拉下来的比较新罢, 我也不知道是怎么回事(不敢相信.jpg).&lt;/p&gt;

&lt;p&gt;下一步, 告诉编译器我要C++17标准的, 这个找了半天, 我下面写一段代码, &lt;strong&gt;不保证一定是对的&lt;/strong&gt;, 我只能说我编译出来了, 而且用起来没问题.&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CheckCXXCompilerFlag&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;CHECK_CXX_COMPILER_FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/std:c++17&quot;&lt;/span&gt; _cpp_17_flag_supported&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;_cpp_17_flag_supported&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;add_compile_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/std:c++17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把上面这段代码附加到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmakelists.txt&lt;/code&gt;末尾, 全部生成, 一切正常. 安装exiv2, 完毕.&lt;/p&gt;

&lt;p&gt;这些做完了之后不要关VS, 现在只是编译了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x64-Debug&lt;/code&gt;版本的, 到配置管理器里添加一个Release版本的再来一次, 省得发布的时候再折腾.&lt;/p&gt;

&lt;h2 id=&quot;使用exiv2&quot;&gt;使用Exiv2&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;本来网上有几篇写这个的, 但我为什么还要写一遍呢? 因为网上的(至少是我看见的)都是读EXIF信息, 没有写入的, 为此我绕了个弯子, 所以发出来给大伙瞧瞧写入照比读取要多了什么(你能猜到罢?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;void BingPicker::addCopyRight(const QString&amp;amp; filepath, const QString&amp;amp; copyright) {
    using namespace Exiv2;
    //这改成unique_ptr了, 发现没?
    Image::UniquePtr image = ImageFactory::open(filepath.toStdString());
    assert(image.get());

    image-&amp;gt;readMetadata();
    ExifData ed = image-&amp;gt;exifData();
    ed[&quot;Exif.Image.Copyright&quot;] = copyright.toStdString();
    image-&amp;gt;setExifData(ed);         //note this
    image-&amp;gt;writeMetadata();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;额, 网上没有写入的例子, 我是在官网文档给的例子里找了一阵子把下面两句补上的. 你猜得没错, 写入是要保存的, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setExifData&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writeMetadata&lt;/code&gt;就是写入的关键, zzs之前只顾着找网上现成的抄, 运行了发现根本没写进去, 为此一顿好找…&lt;/p&gt;

&lt;p&gt;上面&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExifData::operator[]&lt;/code&gt;返回的是一个引用, 如果没有这个键值会直接新建一个(参考map的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator[]&lt;/code&gt;), 用法很直觉, 不用担心段错误.&lt;/p&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;我把浏览器关了, 就不找之前看过啥教程了..这把写的比较详细应该…感谢StackOverflow上提问的老哥, 我在回答里翻出来了cmake切换C++语言标准的代码…感谢网上两篇exiv2读EXIF的教程&lt;/p&gt;

&lt;p&gt;照例感谢一万篇教程的作者们.&lt;/p&gt;

&lt;p&gt;想看源码的话, 这是zzs的必应美图下载器-&amp;gt; &lt;a href=&quot;https://github.com/JamzumSum/BingPicker&quot;&gt;GitHub&lt;/a&gt;, 还有Release版本可供下载哦(滑稽)&lt;/p&gt;</content><author><name>JamzumSum</name></author><category term="coding" /><category term="C++" /><category term="exiv" /><summary type="html">使用Exiv2修改图像的EXIF头信息</summary></entry><entry><title type="html">多个qmake共存可能造成的后果以及解决</title><link href="https://www.zzsblog.top/coding/2019/10/08/%E5%A4%9A%E4%B8%AAqmake%E5%85%B1%E5%AD%98.html" rel="alternate" type="text/html" title="多个qmake共存可能造成的后果以及解决" /><published>2019-10-08T00:00:00+00:00</published><updated>2019-10-08T00:00:00+00:00</updated><id>https://www.zzsblog.top/coding/2019/10/08/%E5%A4%9A%E4%B8%AAqmake%E5%85%B1%E5%AD%98</id><content type="html" xml:base="https://www.zzsblog.top/coding/2019/10/08/%E5%A4%9A%E4%B8%AAqmake%E5%85%B1%E5%AD%98.html">&lt;h1 id=&quot;多个qmake共存可能造成的后果以及解决&quot;&gt;多个qmake共存可能造成的后果以及解决&lt;/h1&gt;

&lt;p&gt;前几天zzs脑子抽了把python3.7 3.6都卸了, 装了个什么Anaconda…这一装不要紧, 我电脑上自己写的Qt小程序全不好使了, 什么换壁纸啊什么校园网自动登录啊, 全都上天:( 于是实验也不写了, 一上午就怼这破事, 总算整明白了. 因为情况诡异, 百度上也不好找, 写一篇博客记录 &lt;del&gt;(凑数)&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;./assets/multi-qmake/error.png&quot; alt=&quot;报错&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大致问题就这样, 把错误信息放到网上一搜, 也是一大堆解决办法. 网上的解决方案, 无非是两种:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windeployqt&lt;/code&gt;发布程序, 或者类似的复制一大堆库啊什么的到程序旁边&lt;/li&gt;
  &lt;li&gt;设置环境变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QT_QPA_PLATFORM_PLUGIN_PATH&lt;/code&gt;为你对应的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin/platform&lt;/code&gt;, 然后就行了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里边第一种不符合我的要求, 毕竟我不是要发布程序, 我只是自己用; 第二种实测对我不好使(其实对一般人应该是好使的, 但我的问题跟别人不太一样).&lt;/p&gt;

&lt;p&gt;那我到底是什么问题呢? 我之前是正常的, 直到我安装Anaconda后出了问题. Anaconda做了什么? Anaconda给我安了一套Qt库. 所以, 我现在电脑上有 &lt;strong&gt;两个qmake&lt;/strong&gt;! 一个是我一直在用的msvc2017_64, 一个是Anaconda带的qmake.&lt;/p&gt;

&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;

&lt;p&gt;为什么会有这种怪事? 为什么之前没有? 让我们看看.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qmake &lt;span class=&quot;nt&quot;&gt;-query&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;./assets/multi-qmake/qmake_conda.png&quot; alt=&quot;qmake-anaconda&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再进入msvc的qmake所在目录, 运行同样的命令&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/multi-qmake/qmake_msvc.png&quot; alt=&quot;qmake-msvc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到, 直接调用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake -query&lt;/code&gt;全都指向了Anaconda下. 这和我们的期望不符, 我们希望它能指向后一个, msvc目录下的各个目录.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake -query&lt;/code&gt;命令的输出可以由qmake所在目录下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qt.conf&lt;/code&gt;覆盖. 也就是说, qmake旁边的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qt.conf&lt;/code&gt;指定了这些路径. 让我们看看那里面都写了什么.&lt;/p&gt;

&lt;p&gt;D:\Anaconda\qt.conf&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;]
&lt;span class=&quot;n&quot;&gt;Prefix&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;Anaconda3&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Binaries&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;Anaconda3&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Libraries&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;Anaconda3&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;Anaconda3&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;qt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TargetSpec&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;win32&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;msvc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HostSpec&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;win32&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;msvc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再看看D:\Qt\5.11.1\msvc2017_64\bin\qt.conf&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;]
&lt;span class=&quot;n&quot;&gt;Documentation&lt;/span&gt;=../../&lt;span class=&quot;n&quot;&gt;Docs&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;-&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Examples&lt;/span&gt;=../../&lt;span class=&quot;n&quot;&gt;Examples&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;-&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Prefix&lt;/span&gt;=..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Prefix&lt;/code&gt;指示根目录, 那么Anaconda下的qt.conf指向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:/Anaconda3/Library&lt;/code&gt;, msvc下的qt.conf指向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:\Qt\5.11.1\msvc2017_64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;所以我们大致可以明白, 我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake -query&lt;/code&gt;调用的是Anaconda目录下的qmake.exe, 而我们想要调用msvc目录下的qmake.&lt;/p&gt;

&lt;p&gt;于是问题就变成, 同样是qmake, 为什么我们在控制台里敲的qmake调用的是Anaconda的qmake而不是我们原来的, 配置了正确环境变量的msvc下的qmake呢?&lt;/p&gt;

&lt;p&gt;想想, 在cmd里敲一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake&lt;/code&gt;, 为什么能执行呢? 因为我们在系统环境变量里, 在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;里添加了它的路径. 当你执行一条命令, cmd先在当前目录下查找该可执行文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake&lt;/code&gt;, 如果没找到则在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;记录的路径里查找这个文件.
很显然, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;里的目录们是按顺序查找的. 也就是说, 如果我有若干个目录下都有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake.exe&lt;/code&gt;, 那么调用的就是最靠前的一个目录下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;让我们看看我此时环境变量的设置:
&lt;img src=&quot;./assets/multi-qmake/global_before.png&quot; alt=&quot;global-before&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:\Anaconda\Library\bin&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:\Qt\5.11.1\msvc2017_64&lt;/code&gt;下都存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmake.exe&lt;/code&gt;, 于是调用的是前一个目录, 也就是Anaconda的qmake.&lt;/p&gt;

&lt;p&gt;于是我们的想法也简单, 把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:\Anaconda\Library\bin&lt;/code&gt;下移到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:\Qt\5.11.1\msvc2017_64&lt;/code&gt;下面.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/multi-qmake/global_after.png&quot; alt=&quot;global-after&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大功告成&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/multi-qmake/OK.png&quot; alt=&quot;success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nice!&lt;/p&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;虽然百度的教程还有Qt论坛什么的到最后并没有什么用…但还是感谢写教程的各位dalao…
嗯, 最后, 因为我Anaconda用的还不是很多, 这种办法对Anaconda有什么影响也还不清楚(我想我应该用不上pyqt罢…)如果有问题或许换回来就好了罢hhhh&lt;/p&gt;

&lt;p&gt;蟹蟹你能来看, 如果觉得有用可以收藏我的博客哦)/&lt;/p&gt;</content><author><name>JamzumSum</name></author><category term="coding" /><category term="C++" /><category term="Qt" /><category term="anaconda" /><category term="qmake" /><summary type="html">多个qmake共存可能造成的后果以及解决</summary></entry></feed>